{"ast":null,"code":"var _jsxFileName = \"/home/saurabh/saurabh/react_app/react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractAbi, contractAddress } from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Finished from \"./Components/Finished\";\nimport Connected from \"./Components/Connected\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [RemainingTime, setRemainingTime] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState(\"\");\n  const [CanVote, setCanVote] = useState(true);\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n    }\n    getCandidates();\n    getRemainingTime();\n    getCurrentStatus();\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      }\n    };\n  }, [account]); // Only re-run effect when 'account' changes\n\n  useE;\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        setSigner(signer);\n        const address = await signer.getAddress();\n        setAccount(address);\n        setIsConnected(true);\n        console.log(\"Metamask Connected : \" + address);\n        canVote();\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"Metamask is not detected in the browser\");\n    }\n  }\n  async function vote() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const tx = await contractInstance.vote(number);\n      await tx.wait();\n      canVote();\n    } catch (err) {\n      console.error(\"Error voting:\", err);\n    }\n  }\n  async function canVote() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const voteStatus = await contractInstance.voters(await signer.getAddress());\n      setCanVote(voteStatus);\n    } catch (err) {\n      console.error(\"Error checking voting status:\", err);\n    }\n  }\n  async function getCandidates() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const candidatesList = await contractInstance.getAllVotesOfCandiates();\n      const formattedCandidates = candidatesList.map((candidate, index) => ({\n        index: index,\n        name: candidate.name,\n        voteCount: candidate.voteCount.toNumber()\n      }));\n      setCandidates(formattedCandidates);\n    } catch (err) {\n      console.error(\"Error fetching candidates:\", err);\n    }\n  }\n  async function getCurrentStatus() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const status = await contractInstance.getVotingStatus();\n      setVotingStatus(status);\n    } catch (err) {\n      console.error(\"Error fetching voting status:\", err);\n    }\n  }\n  async function getRemainingTime() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const time = await contractInstance.getRemainingTime();\n\n      // Assuming `time` is a hexadecimal string\n      setRemainingTime(parseInt(time, 10)); // Adjust if time is in decimal\n    } catch (err) {\n      console.error(\"Error fetching remaining time:\", err);\n    }\n  }\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      canVote();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n  function handleNumberChange(e) {\n    setNumber(e.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: votingStatus ? isConnected ? /*#__PURE__*/_jsxDEV(Connected, {\n      account: account,\n      candidates: candidates,\n      RemainingTime: RemainingTime,\n      number: number,\n      handleNumberChange: handleNumberChange,\n      voteFunction: vote,\n      showButton: CanVote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Finished, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qHiNjsihcOvkRWQf29LsX3sR/BA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ethers","contractAbi","contractAddress","Login","Finished","Connected","jsxDEV","_jsxDEV","App","_s","provider","setProvider","signer","setSigner","account","setAccount","isConnected","setIsConnected","votingStatus","setVotingStatus","RemainingTime","setRemainingTime","candidates","setCandidates","number","setNumber","CanVote","setCanVote","window","ethereum","on","handleAccountsChanged","getCandidates","getRemainingTime","getCurrentStatus","removeListener","useE","connectToMetamask","providers","Web3Provider","send","getSigner","address","getAddress","console","log","canVote","err","error","vote","contractInstance","Contract","tx","wait","voteStatus","voters","candidatesList","getAllVotesOfCandiates","formattedCandidates","map","candidate","index","name","voteCount","toNumber","status","getVotingStatus","time","parseInt","accounts","length","handleNumberChange","e","target","value","className","children","voteFunction","showButton","fileName","_jsxFileName","lineNumber","columnNumber","connectWallet","_c","$RefreshReg$"],"sources":["/home/saurabh/saurabh/react_app/react-app/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractAbi, contractAddress } from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Finished from \"./Components/Finished\";\nimport Connected from \"./Components/Connected\";\nimport \"./App.css\";\n\nfunction App() {\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [RemainingTime, setRemainingTime] = useState(\"\");\n  const [candidates, setCandidates] = useState([]);\n  const [number, setNumber] = useState(\"\");\n  const [CanVote, setCanVote] = useState(true);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n    }\n\n    getCandidates();\n    getRemainingTime();\n    getCurrentStatus();\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      }\n    };\n  }, [account]); // Only re-run effect when 'account' changes\n\n  useE\n\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        setSigner(signer);\n\n        const address = await signer.getAddress();\n        setAccount(address);\n        setIsConnected(true);\n\n        console.log(\"Metamask Connected : \" + address);\n        canVote();\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"Metamask is not detected in the browser\");\n    }\n  }\n\n  async function vote() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const tx = await contractInstance.vote(number);\n      await tx.wait();\n      canVote();\n    } catch (err) {\n      console.error(\"Error voting:\", err);\n    }\n  }\n\n  async function canVote() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const voteStatus = await contractInstance.voters(await signer.getAddress());\n      setCanVote(voteStatus);\n    } catch (err) {\n      console.error(\"Error checking voting status:\", err);\n    }\n  }\n\n  async function getCandidates() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const candidatesList = await contractInstance.getAllVotesOfCandiates();\n\n      const formattedCandidates = candidatesList.map((candidate, index) => ({\n        index: index,\n        name: candidate.name,\n        voteCount: candidate.voteCount.toNumber(),\n      }));\n\n      setCandidates(formattedCandidates);\n    } catch (err) {\n      console.error(\"Error fetching candidates:\", err);\n    }\n  }\n\n  async function getCurrentStatus() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const status = await contractInstance.getVotingStatus();\n      setVotingStatus(status);\n    } catch (err) {\n      console.error(\"Error fetching voting status:\", err);\n    }\n  }\n\n  async function getRemainingTime() {\n    try {\n      const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n      const time = await contractInstance.getRemainingTime();\n\n      // Assuming `time` is a hexadecimal string\n      setRemainingTime(parseInt(time, 10)); // Adjust if time is in decimal\n    } catch (err) {\n      console.error(\"Error fetching remaining time:\", err);\n    }\n  }\n\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n      canVote();\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n\n  function handleNumberChange(e) {\n    setNumber(e.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      {votingStatus ? (\n        isConnected ? (\n          <Connected\n            account={account}\n            candidates={candidates}\n            RemainingTime={RemainingTime}\n            number={number}\n            handleNumberChange={handleNumberChange}\n            voteFunction={vote}\n            showButton={CanVote}\n          />\n        ) : (\n          <Login connectWallet={connectToMetamask} />\n        )\n      ) : (\n        <Finished />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}