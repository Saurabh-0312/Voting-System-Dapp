{"ast":null,"code":"var _jsxFileName = \"/home/saurabh/saurabh/react_app/react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractAbi, contractAddress } from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Connected from \"./Components/Connected\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [RemainingTime, setRemainingTime] = useState(\"\");\n  useEffect(() => {\n    getCandidates();\n    getRemainingTime();\n    getCurrentStatus();\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n      }\n    };\n  });\n  async function getCandidates() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const candidatesList = await contractInstance.getAllVotesOfCandiates();\n    console.log(candidatesList);\n  }\n  async function getCurrentStatus() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const status = await contractInstance.getVotingStatus();\n    setVotingStatus(status);\n  }\n  async function getRemainingTime() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    const contractInstance = new ethers.Contract(contractAddress, contractAbi, signer);\n    const time = await contractInstance.getRemainingTime();\n    setRemainingTime(parseInt(time, 16));\n  }\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setAccount(address);\n        console.log(\"Metamask Connected : \" + address);\n        setIsConnected(true);\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"Metamask is not detected in the browser\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: isConnected ? /*#__PURE__*/_jsxDEV(Connected, {\n      account: account\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      connectWallet: connectToMetamask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jbcQzY4myQ5OcTcNu8t23Oxrm8A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ethers","contractAbi","contractAddress","Login","Connected","jsxDEV","_jsxDEV","App","_s","provider","setProvider","account","setAccount","isConnected","setIsConnected","votingStatus","setVotingStatus","RemainingTime","setRemainingTime","getCandidates","getRemainingTime","getCurrentStatus","window","ethereum","on","handleAccountsChanged","removeListener","providers","Web3Provider","send","signer","getSigner","contractInstance","Contract","candidatesList","getAllVotesOfCandiates","console","log","status","getVotingStatus","time","parseInt","accounts","length","connectToMetamask","address","getAddress","err","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","connectWallet","_c","$RefreshReg$"],"sources":["/home/saurabh/saurabh/react_app/react-app/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractAbi, contractAddress } from \"./Constant/constant\";\nimport Login from \"./Components/Login\";\nimport Connected from \"./Components/Connected\";\nimport \"./App.css\";\n\nfunction App() {\n  const [provider, setProvider] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [votingStatus, setVotingStatus] = useState(true);\n  const [RemainingTime, setRemainingTime] = useState(\"\");\n\n  useEffect(() => {\n    getCandidates();\n    getRemainingTime();\n    getCurrentStatus();\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\n          \"accountsChanged\",\n          handleAccountsChanged\n        );\n      }\n    };\n  });\n\n  async function getCandidates() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n\n    const contractInstance = new ethers.Contract(\n      contractAddress,\n      contractAbi,\n      signer\n    );\n\n    const candidatesList = await contractInstance.getAllVotesOfCandiates();\n    console.log(candidatesList);\n  }\n\n  async function getCurrentStatus() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n\n    const contractInstance = new ethers.Contract(\n      contractAddress,\n      contractAbi,\n      signer\n    );\n    const status = await contractInstance.getVotingStatus();\n    setVotingStatus(status);\n  }\n\n  async function getRemainingTime() {\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n\n    const contractInstance = new ethers.Contract(\n      contractAddress,\n      contractAbi,\n      signer\n    );\n    const time = await contractInstance.getRemainingTime();\n    setRemainingTime(parseInt(time, 16));\n  }\n\n  function handleAccountsChanged(accounts) {\n    if (accounts.length > 0 && account !== accounts[0]) {\n      setAccount(accounts[0]);\n    } else {\n      setIsConnected(false);\n      setAccount(null);\n    }\n  }\n  async function connectToMetamask() {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        setProvider(provider);\n        await provider.send(\"eth_requestAccounts\", []);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setAccount(address);\n        console.log(\"Metamask Connected : \" + address);\n        setIsConnected(true);\n      } catch (err) {\n        console.error(err);\n      }\n    } else {\n      console.error(\"Metamask is not detected in the browser\");\n    }\n  }\n  return (\n    <div className=\"App\">\n      {isConnected ? (\n        <Connected account={account} />\n      ) : (\n        <Login connectWallet={connectToMetamask} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}